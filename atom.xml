<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Elton Luís Minetto]]></title>
  <link href="http://eminetto.github.com/atom.xml" rel="self"/>
  <link href="http://eminetto.github.com/"/>
  <updated>2012-05-08T18:18:12-03:00</updated>
  <id>http://eminetto.github.com/</id>
  <author>
    <name><![CDATA[eminetto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Palestra sobre segurança e crimes digitais]]></title>
    <link href="http://eminetto.github.com/blog/2012/05/07/palestra-sobre-seguranca-e-crimes-digitais/"/>
    <updated>2012-05-07T18:18:19-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/05/07/palestra-sobre-seguranca-e-crimes-digitais</id>
    <content type="html"><![CDATA[<p>No último fim de semana ministrei uma palestra sobre segurança e crimes digitais para uma turma formada por alunos de Sistemas de Informação e Direito, em um curso na Unoesc Chapecó. </p>

<p>Foi uma experiência muito legal, principalmente pelas contribuições da professora <a href="facebook.com/nice.bueno/">Elenice Bueno</a>, que complementou os meus tópicos com excelentes explicações da área jurídica, que era o foco principal do curso que ela estava ministrando. Os alunos também fizeram comentários e deram mais alguns exemplos interessantes. </p>

<p>O material da palestra está nesse <a href="http://prezi.com/aupf1kqhzbik/securanca-da-informacao-e-crimes-digitais/">link</a>. Por ser uma apresentação feita no aplicativo Prezi não é possível fazer o download do material pelo site, mas se alguém tiver interesse é só entrar em contato que eu tento exportar para algum formato.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post no Javascript Brasil]]></title>
    <link href="http://eminetto.github.com/blog/2012/05/03/post-no-javascript-brasil/"/>
    <updated>2012-05-03T14:09:45-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/05/03/post-no-javascript-brasil</id>
    <content type="html"><![CDATA[<p>Fui convidado por um dos meus gurus de Javascript, o  <a href="http://twitter.com/osuissa">@osuissa</a>,  a escrever um post no <a href="http://javascriptbrasil.com/">Javascript Brasil</a>, sobre o <a href="http://javascriptbrasil.com/artigos/meteor">Meteor</a>.</p>

<p>Espero poder contribuir com mais alguns posts, pois tenho trabalhado bastante com Javascript, e me divertindo bastante :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crie sua marca pessoal]]></title>
    <link href="http://eminetto.github.com/blog/2012/05/03/crie-sua-marca-pessoal/"/>
    <updated>2012-05-03T14:02:46-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/05/03/crie-sua-marca-pessoal</id>
    <content type="html"><![CDATA[<p>Recentemente encontrei um <a href="http://www.codinghorror.com/blog/2006/04/your-personal-brand.html">post</a> que havia lido anos atrás e achei interessante comentá-lo aqui, pois ele continua relevante. O autor fala brevemente da importância de termos uma &#8220;personal brand&#8221; e cita algumas dicas úteis para nós que trabalhamos na área de TI. São elas (em tradução livre e com meus comentários):</p>

<p><strong>Lidere ou crie um grupo de usuários</strong></p>

<p>Posso citar vários amigos da comunidade PHP que trabalharam em grupos de usuários (PHP-SP, PHP-SC, PHP-MS, PHP-Maranhão, etc) e hoje encontram-se em empregos ótimos, e muito respeitados nas suas áreas. É algo que vai ocupar um pouco do seu tempo livre, mas que tem muita recompensa.</p>

<p><strong>Crie ou contribua com um projeto open-soure popular</strong></p>

<p>Também muito importante, pois é uma chance de você mostrar a várias pessoas o seu código, a sua forma de trabalhar.
Alguns exemplos: <a href="http://www.doctrine-project.org">Doctrine</a> e o grande <a href="http://twitter.com/guilhermeblanco">Guilherme Blanco</a>, <a href="https://github.com/Respect">Respect</a> e o seu criador <a href="http://twitter.com/alganet">Alexandre Gaigalas</a>.</p>

<p><strong>Escreva um blog</strong></p>

<p>Esse blog começou como um site onde eu anotava as coisas que eu ia aprendendo, para poder usar mais tarde caso necessário, e acabou gerando muitos amigos e algumas boas propostas de emprego/projetos. A minha regra é: se eu demorei mais de 30 min para resolver ou aprender algo, no mínimo posso salvar 30 min do tempo de alguém, então isso acaba virando um post.</p>

<p><strong>Publique um livro</strong></p>

<p>Publicar um livro nos dias de hoje é algo um pouco mais fácil do que a alguns anos atrás, graças a popularização dos e-books e seus formatos. Você pode também aproveitar as lojas e serviços como Amazon, iBooks, ou colocar a venda (ou de graça) no seu próprio site, como eu fiz com o <a href="http://www.zfnapratica.com.br">Zend Framework na Prática</a>.</p>

<p>Você também pode optar por um livro impresso e entrar em contato com as editoras, que estão sempre em busca de novos autores e títulos. Eu trabalhei com a Editora <a href="http://www.novatec.com.br/">Novatec</a> e tive uma boa experiência.</p>

<p>Se você me perguntar se vale a pena eu vou responder que financeiramente não é algo que vá te deixar rico, mas vai te trazer reconhecimento, satisfação e alguns ótimos amigos</p>

<p><strong>Palestre em conferências</strong></p>

<p>Existem várias conferências onde você pode mostrar seu conhecimento e aparecer para o mercado. Eu recomendo começar por eventos menores, do seu grupo de usuários, da sua empresa, da sua universidade, para conseguir mais confiança perante ao público e depois partir para as conferências maiores como PHPConf, FISL e até as internacionais (uma ambição que eu ainda tenho hehe). Aqueles velhos medos como &#8220;e se as pessoas da platéia souberem mais do que eu?&#8221;, &#8220;e se me perguntarem algo que eu não sei&#8221; são infundados, pois todos sabem que ninguém é &#8220;dono da verdade&#8221;. Todas as minhas experiências palestrando foram muito recompensadoras, desde apresentar para 5 pessoas até 2 auditórios cheios de gente, no FISL 2009.</p>

<p>Como o próprio autor do post comenta, essas são apenas algumas dicas, existem diversas outras formas de se fazer isso, mas já é um bom começo com um bom retorno.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maldito segmentation fault]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/27/maldito-segmentation-fault/"/>
    <updated>2012-04-27T15:30:50-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/27/maldito-segmentation-fault</id>
    <content type="html"><![CDATA[<p>Esse é um daqueles posts que serve mais para me ajudar, mas acho que pode ser útil para mais pessoas.
Já tive vários casos onde uma aplicação PHP gera um erro muito genérico nos logs do Apache, o famigerado &#8220;Segmentation fault&#8221;. Na prática significa que alguma coisa deu tão errado que o processo do Apache que estava executando o seu script PHP foi cancelado. Mas o log não ajuda muito, pois podem ser várias coisas.
Nesse post vou descrever o processo que fiz para encontrar um problema em uma aplicação. Os passos foram feitos em uma máquina virtual Ubuntu, a que eu gerei com o <a href="http://eltonminetto.net/2012/04/02/usando-o-vagrant-para-criar-maquinas-virtuais-para-desenvolvimento-e-testes/">Vagrant</a>.
O primeiro passo é instalar os pacotes necessários para conseguirmos toda a informação possível:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install libapr1-dbg libaprutil1-dbg gdb php5-dbg
</span></code></pre></td></tr></table></div></figure>


<p>Precisamos também configurar o Apache para que ele gere um &#8220;dump&#8221; com toda a informação do erro em um arquivo. No arquivo /etc/apache2/apache2.conf eu adicionei a seguinte linha:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CoreDumpDirectory /tmp/apache2-gdb-dump
</span></code></pre></td></tr></table></div></figure>


<p>Também precisamos criar o diretório e dar permissões para o Apache criar os arquivos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /tmp/apache2-gdb-dump
</span><span class='line'>chown -R www-data:www-data /tmp/apache2-gdb-dump
</span></code></pre></td></tr></table></div></figure>


<p>Após reiniciar o Apache é só executar novamente o script que está gerando o erro, e um arquivo será gerado no diretório criado, o <em>/tmp/apache2-gdb-dump/core</em></p>

<p>Com esse arquivo podemos executar o gdb e verificar o que aconteceu com o programa. Precisamos executar:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb /usr/sbin/apache2 /tmp/apache2-gdb-dump/core
</span></code></pre></td></tr></table></div></figure>


<p>Será mostrado uma lista de ítens que o Apache executou. Para ver mais detalhe é só executar o comando</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bt full
</span></code></pre></td></tr></table></div></figure>


<p>Analisando as mensagem é bem provável que você vai encontrar uma pista para o que exatamente está ocorrendo. No caso da minha aplicação que testei hoje o problema era na forma como estava carregando o arquivo .phar do Silex, conforme o que o gdb me mostrou:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#0  0x0112cefe in phar_get_archive (archive=0xbff5f87c, fname=0xb5dab6c4 &quot;/vagrant/SOA-Server/vendor/silex.phar&quot;, fname_len=55, alias=0x213f323c &quot;silex.phar&quot;, alias_len=10, error=0x0) at /build/buildd/php5-5.3.2/ext/phar/util.c:1255</span>
</span></code></pre></td></tr></table></div></figure>


<p>Espero que esse post seja útil para mais alguém, e se você tiver outra receita de como desvendar esse tipo de problemas é só usar os comentários para dar a dica.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git sparse checkouts]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/25/git-sparse-checkouts/"/>
    <updated>2012-04-25T13:45:14-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/25/git-sparse-checkouts</id>
    <content type="html"><![CDATA[<p>Ontem eu e o colega <a href="http://twitter.com/msilvagarcia">Marcos Garcia</a> nos deparamos com uma situação que acabou nos ensinando mais um truque do git
Um dos repositórios privados da <a href="http://www.coderockr.com">Coderockr</a> no Github tem uma estrutura parecida com essa:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Design - arquivos PSD e PNG com as telas <span class="k">do </span>projeto
</span><span class='line'>Docs - documentações <span class="k">do </span>projeto
</span><span class='line'>Android - porção Android
</span><span class='line'>iOS - porção de códigos para o iPhone/iPad
</span><span class='line'>Web - interface de administração <span class="k">do </span>projeto, acessível via web
</span><span class='line'>library - diretório com entidades e webservices usado pelo projeto
</span></code></pre></td></tr></table></div></figure>


<p>A nossa necessidade era de fazer o deploy para o nosso servidor web apenas da pasta Web do projeto, não necessitando das demais. O git permite fazer algo assim usando <a href="http://help.github.com/submodules/">submodulos</a> mas não era exatamente o que procurávamos, principalmente porque cada submodulo deve ser um repositório separado no Github, o que iria aumentar os nossos custos mensais.
Depois de algumas pesquisas no Google o Marcos encontrou a solução pro problema: o git sparse checkouts, uma opção que foi lançada com a versão 1.7 do git.
Para exemplificar o uso, no nosso servidor agora fazemos o seguinte:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone &lt;repository_url&gt; &lt;directory&gt;
</span><span class='line'><span class="nb">cd</span> &lt;directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Habilitamos a opção do sparse checkout</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config core.sparsecheckout <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indicamos quais diretórios queremos ter acesso:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo </span>Web &gt;&gt; .git/info/sparse-checkout
</span><span class='line'><span class="nb">echo </span>library &gt;&gt; .git/info/sparse-checkout
</span></code></pre></td></tr></table></div></figure>


<p>E rodamos o comando <em>read-tree</em> para atualizar a árvore de diretórios</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git <span class="nb">read</span>-tree -m -u HEAD
</span></code></pre></td></tr></table></div></figure>


<p>Se verificar com o comando <em>ls</em> é possível ver que os outros diretórios desapareceram do diretório do projeto
Quando rodarmos um git pull para atualizar, apenas os diretórios Web e library serão atualizados.
Com isso conseguimos resolver o nosso problema sem aumentar os nossos custos ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meteor]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/23/meteor/"/>
    <updated>2012-04-23T14:22:06-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/23/meteor</id>
    <content type="html"><![CDATA[<p>Esse post é minha participação no <a href="http://www.coderockr.com/blog/2012/04/desafio-de-programacao/">desafio Coderockr de programação</a>.
Eu escolhi desenvolver o aplicativo usando um framework de Javascript chamado <a href="http://meteor.com/">Meteor</a>, que conheci em um post no Hacker News e estava na minha lista de coisas interessantes a olhar com calma. Exatamente o tipo de situação que o desafio quer promover :)
O Meteor é um framework realmente interessante. Ele é baseado em algumas tecnologias de JavaScript que permitem criarmos um aplicativo completo usando apenas essa linguagem, tanto a porção servidor (ele usa o Nodejs para isso) quanto a parte cliente (jQuery e templates usando o <a href="http://www.handlebarsjs.com/">Handlebars</a>)
Para instalar o Meteor é preciso executar os comandos no terminal (no Linux e MacOSX):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl install.meteor.com | /bin/sh
</span></code></pre></td></tr></table></div></figure>


<p>Para criar um novo projeto é só executar os comandos:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>meteor create myapp
</span></code></pre></td></tr></table></div></figure>


<p>O Meteor possui um servidor para podermos fazer o teste da aplicação. Para executá-lo é só:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>myapp
</span><span class='line'>meteor
</span></code></pre></td></tr></table></div></figure>


<p>E para acessar no navegador é só usar a url <em>http://localhost:3000</em></p>

<p>Um projeto do Meteor é composto de três arquivos: um css, um html e um JavaScript. Pode ser estruturado de outra forma, mas esse é o exemplo mais comum. Dentro do JavaScript podemos definir a lógica que será executada no cliente (e que será enviada para o navegador do usuário) e a porção que será executada no servidor (no Nodejs).</p>

<p>Para testar o framework eu criei um pequeno projeto, de cadastro de contatos. Para rodar o meu exemplo é só executar (depois de ter instalado o Meteor):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:eminetto/MeteorContactListSample.git
</span><span class='line'><span class="nb">cd </span>MeteorContactListSample/
</span><span class='line'>meteor
</span></code></pre></td></tr></table></div></figure>


<p>No arquivo ContactList.htzml é definido o visual do aplicativo, usando o sistema de templates usado pelo Meteor. No trecho abaixo definimos dois templates (add_contact e contacts) e fazemos a inclusão dos dois, dentro da tag body:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;head>
</span><span class='line'>  &lt;title>ContactList&lt;/title>
</span><span class='line'>&lt;/head>
</span><span class='line'>
</span><span class='line'>&lt;body>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>  
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;/body>
</span><span class='line'>
</span><span class='line'>&lt;template name="add_contact">
</span><span class='line'>  &lt;h3> contact&lt;/h3>
</span><span class='line'>  &lt;div id="new-contact">
</span><span class='line'>    &lt;input type="hidden" id="id" name="id">
</span><span class='line'>    Name: &lt;input type="text" name="name" id="name">&lt;br>
</span><span class='line'>    E-mail: &lt;input type="text" name="email" id="email">&lt;br>
</span><span class='line'>    &lt;input type="button" id="actionButton" value="">
</span><span class='line'>  &lt;/div>
</span><span class='line'>&lt;/template>
</span><span class='line'>
</span><span class='line'>&lt;template name="contacts">
</span><span class='line'>  &lt;h3>Contacts&lt;/h3>
</span><span class='line'>  &lt;div id="contacts">
</span><span class='line'>    
</span><span class='line'>      &lt;div class="contact">
</span><span class='line'>         -  
</span><span class='line'>        &lt;input type="button" class="edit" id="" value="edit">
</span><span class='line'>        &lt;input type="button" class="del" id="" value="del">
</span><span class='line'>        &lt;br>
</span><span class='line'>      &lt;/div>
</span><span class='line'>    
</span><span class='line'>  &lt;/div>
</span><span class='line'>&lt;/template></span></code></pre></td></tr></table></div></figure>


<p>O que está dentro de  são variáveis que serão substituídas pelo sistema de templates. A instrução <em>each</em> é usada como um <em>for</em> e mostrará todos os contatos existentes.</p>

<p>No arquivo ContactList.js está a lógica do aplicativo. E aí entra algo muito interessante: as Collections. São interfaces para o banco de dados MongoDB que é usado pelo framework. Na documentação é citado que pode ser extendido para usar com outros bancos de dados, mas não cheguei a testar isso. Quando a aplicação é executada é criado um banco de dados MongoDB e os dados são inseridos nele. Uma das coisas mais legais do Meteor é que ele gera uma cópia do banco de dados no lado do cliente, assim o mesmo comando usado pelo servidor é usado pelo cliente. E os dados são sincronizados, o que significa que no momento que um cliente modifica o banco de dados essa mudança é replicada automaticamente para o servidor, que manda a alteração para todos os clientes. Magia negra! Você tem um sistema sincronizado entre diversos clientes, sem precisar se preocupar com isso, o que é realmente uma vantagem.
O código do ContactList.js:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Contacts</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Meteor</span><span class="p">.</span><span class="nx">Collection</span><span class="p">(</span><span class="s2">&quot;contacts&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">is_client</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">,</span><span class="s1">&#39;add&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Template</span><span class="p">.</span><span class="nx">add_contact</span><span class="p">.</span><span class="nx">action</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">action</span> <span class="o">=</span> <span class="nx">Session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;action&quot;</span><span class="p">)</span> <span class="o">||</span> <span class="s2">&quot;add&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">action</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Template</span><span class="p">.</span><span class="nx">add_contact</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;click input#actionButton&#39;</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">$action</span> <span class="o">=</span> <span class="nx">Session</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">$name</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#name&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span>
</span><span class='line'>          <span class="nx">$email</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#email&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$action</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">$action</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Contacts</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span>  <span class="nx">$name</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">email</span><span class="o">:</span> <span class="nx">$email</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;contact &#39;</span> <span class="o">+</span> <span class="nx">$name</span> <span class="o">+</span>  <span class="s1">&#39; added&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">Contacts</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#id&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(),</span> <span class="p">{</span><span class="nx">$set</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$name</span><span class="p">,</span> <span class="nx">email</span><span class="o">:</span> <span class="nx">$email</span><span class="p">}});</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#id&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">,</span> <span class="s1">&#39;add&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;contact &#39;</span> <span class="o">+</span> <span class="nx">$name</span> <span class="o">+</span>  <span class="s1">&#39; modified&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#name&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#email&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Template</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">contact_list</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Contacts</span><span class="p">.</span><span class="nx">find</span><span class="p">({},</span> <span class="p">{</span><span class="nx">sort</span><span class="o">:</span> <span class="p">{</span><span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">}});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Template</span><span class="p">.</span><span class="nx">contacts</span><span class="p">.</span><span class="nx">events</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;click input.del&#39;</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">$contact</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">evt</span><span class="p">.</span><span class="nx">target</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">$id</span> <span class="o">=</span> <span class="nx">$contact</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">Contacts</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">$id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;click input.edit&#39;</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">evt</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">$contact</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">evt</span><span class="p">.</span><span class="nx">target</span><span class="p">),</span>
</span><span class='line'>          <span class="nx">$id</span> <span class="o">=</span> <span class="nx">$contact</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">contact</span> <span class="o">=</span> <span class="nx">Contacts</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span><span class="nx">$id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#id&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="nx">_id</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#name&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#email&quot;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">contact</span><span class="p">.</span><span class="nx">email</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#name&quot;</span><span class="p">).</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">Session</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;action&#39;</span><span class="p">,</span> <span class="s1">&#39;edit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">Meteor</span><span class="p">.</span><span class="nx">is_server</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">Meteor</span><span class="p">.</span><span class="nx">startup</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// code to run on server at startup</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>No código é possível ver os comandos <em>is_client</em> e <em>is_server</em> que dividem o código do cliente e servidor (eles podem ser separados em arquivos diferentes também). Também é possível ver o sistema de eventos (<em>Template.contacts.events</em>) e o retorno do banco de dados sendo enviado ao template (<em>return Contacts.find({}, {sort: {name: 1}});</em>)</p>

<p>No site do Meteor existem alguns <a href="http://meteor.com/examples/leaderboard">exemplos</a> mais complexos que ajudam a entender os detalhes mais avançados.
Apesar de ser uma ferramenta nova (versão 0.3.3 no momento da escrita deste post) eu fiquei surpreso com as possibilidades que ela fornece. Não cheguei a testar em uma aplicação mais complexa ou com maior carga, mas é uma tecnologia que vou prestar muita atenção na sua evolução, pois vejo várias utilidades para ela.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML usando Astah]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/19/uml-usando-astah/"/>
    <updated>2012-04-19T13:43:07-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/19/uml-usando-astah</id>
    <content type="html"><![CDATA[<p>Quem me apresentou o Astah foi o amigo <a href="https://twitter.com/otaviofff">Otavio Ferreira</a>, e me tornei fã imediatamente da ferramenta.
O Astah é uma ferramenta para modelagem UML muito fácil de usar e muito útil. Ela possui edições <a href="http://astah.net/editions">pagas</a> mas eu estou usando a <a href="http://astah.net/editions/community">Community Edition</a>, que é gratuíta e possui as principais funcionalidades que eu preciso no planejamento dos projetos da Coderockr, como modelagem de classes, use cases, componentes, pacotes, etc. As versões pagas contam com plugins para integração com outras ferramentas como as da Atlassian e mais diagramas.
Existem versões para Windows, Linux e Mac e uma <a href="http://astah.net/editions/pad">versão para iPad</a> que apesar de ser mais simples (somente diagramas de classes) impressiona pela facilidade de uso e interface clara.
Para quem precisa/gosta de ter seus projetos bem documentados fica a dica dessa ótima ferramenta.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desafio de programação]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/18/desafio-de-programacao/"/>
    <updated>2012-04-18T17:19:15-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/18/desafio-de-programacao</id>
    <content type="html"><![CDATA[<p>Tivemos mais uma idéia maluca na Coderockr. Propor um desafio de programação. Confere lá no <a href="http://www.coderockr.com/blog/2012/04/desafio-de-programacao/">nosso blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usando Vagrant para criar máquinas virtuais para desenvolvimento e testes]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/02/usando-o-vagrant-para-criar-maquinas-virtuais-para-desenvolvimento-e-testes/"/>
    <updated>2012-04-02T21:38:49-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/02/usando-o-vagrant-para-criar-maquinas-virtuais-para-desenvolvimento-e-testes</id>
    <content type="html"><![CDATA[<p>Recentemente trabalhei em um projeto grande, com equipes trabalhando remotamente, cada desenvolvedor usando o seu ambiente favorito para trabalhar (Linux, MacOS X e Windows) e o sistema tendo diversos requisitos (PHP, MySQL, Memcached, Solr, PHPUnit, etc). Era comum acontecerem problemas como &#8220;na minha máquina todos os testes funcionam, mas na máquina de fulano, que roda Windows não&#8221; ou &#8220;temos um novo programador na equipe, precisamos instalar todos os requisitos para ele começar a trabalhar&#8221;. Para resolver este tipo de problemas uma solução é usarmos máquinas virtuais, com todos os requisitos já instalados e prontos para uso. O VMWare e o VirtualBox são exemplos interessantes para estes casos, mas ainda assim exigem um pouco de trabalho para configurar e instalar tudo. O <a href="http://vagrantup.com/">Vagrant</a> é uma ferramenta que auxilia exatamente neste quesito, a criação das máquinas virtuais.
O Vagrant roda em Windows, Linux e MacOS X (onde eu fiz os testes que apresento nesse post) e necessita do VirtualBox para funcionar. Neste post vou descrever os passos que fizemos na Coderockr para criarmos máquinas virtuais Ubuntu dentro de nossos MacOS X.
O primeiro passo é fazer o download do Vagrant no link <a href="http://downloads.vagrantup.com/tags/v1.0.2">http://downloads.vagrantup.com/tags/v1.0.2</a>
Depois precisamos fazer o download da máquina virtual &#8220;base&#8221; que será usada para gerar as máquinas para cada projeto, com o comando</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant box add base http://files.vagrantup.com/lucid32.box
[/sourcecode]</p>

<p>Um arquivo de 260M é copiado para o diretório .vagrant.d de seu home (/Users/eminetto/.vagrant.d no meu caso). É uma imagem do VirtualBox com o sistema Ubuntu 10.04.</p>

<p>Agora vamos criar o nosso primeiro projeto. Eu criei um diretório:</p>

<p>[sourcecode language=&#8221;bash&#8221;]
mkdir ~/Projects/vagrant
[/sourcecode]</p>

<p>E dentro deste diretório devemos executar o comando</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant init
[/sourcecode]</p>

<p>É criado um arquivo chamado Vagrantfile que é a configuração da sua máquina virtual
Vamos alterar o arquivo e alterar a linha abaixo, que indica qual é nossa VM original.</p>

<p>[sourcecode language=&#8221;ruby&#8221;]
config.vm.box = &#8220;base&#8221;
[/sourcecode]</p>

<p>Se inicializarmos a máquina neste momento ela será criada com o sistema Ubuntu &#8220;zerado&#8221;, sem nenhum pacote adicional, o que não é muito útil para nossa necessidade. Vamos usar uma ferramenta chamada <a href="http://puppetlabs.com/">Puppet</a> (também é possível usar a ferramenta <a href="http://vagrantup.com/docs/provisioners/chef_solo.html">Chef</a>) para automatizar o processo de instalação dos pacotes necessários.
Para instalar o Puppet é necessário o interpretador da linguagem Ruby, que já vem instalado no MacOS X e na maioria dos sistemas Linux atuais (ou pode ser instalado usando o apt-get ou yum, dependendo da distribuição). Vamos executar o comando:</p>

<p>[sourcecode language=&#8221;bash&#8221;]
sudo gem install puppet
[/sourcecode]</p>

<p>Agora precisamos criar um arquivo de configuração para o Puppet. No diretório do projeto (~/Projects/vagrant) vamos criar o diretório manifests:</p>

<p>[sourcecode language=&#8221;bash&#8221;]
mkdir manifests
[/sourcecode]</p>

<p>e o arquivo manifests/base.php, cujo conteúdo está no link <a href="https://gist.github.com/2288198">https://gist.github.com/2288198</a>
Neste arquivo definimos os comandos que queremos executar (exec), os pacotes que devem ser instalados (package) e os serviços que devem ser inicializados (service).
Precisamos também configurar o arquivo Vagrantfile para que ele execute o Puppet:</p>

<p>[sourcecode language=&#8221;ruby&#8221;]
config.vm.provision :puppet do |puppet|</p>

<pre><code>puppet.manifests_path = "manifests"
puppet.manifest_file  = "base.pp"
</code></pre>

<p>end
[/sourcecode]</p>

<p>Agora basta criar a máquina virtual, com o comando</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant up
[/sourcecode]</p>

<p>A primeira vez deve demorar alguns minutos, pois a máquina &#8220;base&#8221; é clonada e o Puppet é executado para instalar os pacotes que indicamos</p>

<p>Para acessar o Apache instalado na máquina virtual é só acessar a url http://127.0.0.1:8080 e para acessar o SSH basta executar</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant ssh
[/sourcecode]</p>

<p>Quando precisar desligar a máquina é só executar</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant halt
[/sourcecode]</p>

<p>e para inicializar novamente basta um</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant up
[/sourcecode]</p>

<p>Caso queira remover a máquina e recriá-la o comando é</p>

<p>[sourcecode language=&#8221;bash&#8221;]
vagrant destroy
[/sourcecode]</p>

<p>E repetir o processo anterior.</p>

<p>Também é possível compartilhar a máquina criada com o restante da equipe, como mostra a <a href="http://vagrantup.com/docs/getting-started/packaging.html">documentação oficial</a></p>

<p>O Vagrant facilita bastante o processo de criação do ambiente de desenvolvimento, e trás diversas vantagens, tanto para um programador solo (poder separar o ambiente de desenvolvimento da máquina real, ter vários ambientes distintos, para os diversos projetos) quanto para equipes (poder facilmente instalar novas máquinas e ter o mesmo ambiente de desenvolvimento em todas as máquinas da equipe).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Snippet do Sublime Text 2 para gerar getters e setters em PHP]]></title>
    <link href="http://eminetto.github.com/blog/2012/03/20/snippet-do-sublime-text-2-para-gerar-getters-e-setters-em-php/"/>
    <updated>2012-03-20T13:51:13-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/03/20/snippet-do-sublime-text-2-para-gerar-getters-e-setters-em-php</id>
    <content type="html"><![CDATA[<p>Aqui entre nós&#8230; Escrever as funções de get() e set() para cada atributo de uma classe é uma daquelas tarefas repetitivas e chatas. Seguindo o conceito de DRY eu fiz uma pesquisa para encontrar alguma forma de gerar isso de maneira mais fácil, usando o meu editor de programação favorito, o <a href="http://eltonminetto.net/2011/12/23/sublime-text/">Sublime Text 2</a>.
Para resolver isso basta escolher a função Tools->New Snippet e substituir o texto pelo novo <a href="https://gist.github.com/2137945">snippet</a></p>

<p>Depois de salvar o arquivo com o nome getset.sublime-snippet está pronto para uso.
Para demonstrar eu criei um pequeno <a href="http://youtu.be/NxPyQMCF_IQ?hd=1">video</a></p>

<p><a href="http://akrabat.com/software/sublime-text-2-snippet-for-php-getter-and-setter-generation/">Fonte</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SOA e Silex]]></title>
    <link href="http://eminetto.github.com/blog/2012/03/13/soa-e-silex/"/>
    <updated>2012-03-13T10:29:11-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/03/13/soa-e-silex</id>
    <content type="html"><![CDATA[<p>Nos últimos anos a arquitetura SOA (<a href="http://en.wikipedia.org/wiki/Service-oriented_architecture?utm_source=twitterfeed&amp;utm_medium=twitter">Service-oriented architecture</a>) deixou de ser uma tendência e virou realidade em diversos projetos e empresas. A maioria dos projetos que a <a href="http://www.coderockr.com">Coderockr</a> desenvolveu em 2011, e tem planejada para 2012, foi desenvolvida dessa forma.</p>

<p>Um dos exemplos é o <a href="http://ufun.coderockr.com/">uFun</a>. Basicamente, a arquitetura da aplicação é:</p>

<p><a href="http://eltonminetto.files.wordpress.com/2012/03/captura-de-tela-2012-03-13-c3a0s-09-57-10.png"><img src="http://eltonminetto.files.wordpress.com/2012/03/captura-de-tela-2012-03-13-c3a0s-09-57-10.png?w=426" alt="Imagem" /></a></p>

<p> </p>

<p>Essa é a típica aplicação que se beneficia desse tipo de arquitetura, pois temos várias interfaces acessando os mesmos dados e lógica. Os dados trafegam na forma de JSON via protocolo HTTP. Muito fácil de trabalhar em todas as plataformas e linguagens usadas no projeto (Objective C, Java, PHP e JavaScript).</p>

<p>Outro assunto que me interessa muito é o de frameworks. Ultimamente tenho estudado bastante os novos micro-frameworks de PHP. A parte server do uFun foi desenvolvida pelo <a href="http://twitter.com/xorna">@xorna</a> em <a href="http://www.slimframework.com/">Slim Framework</a>, que comentei em outro <a href="http://eltonminetto.net/2011/11/29/slim-framework/">post</a>.  Além do Slim Framework outro framework que me pareceu interessante foi o <a href="http://silex.sensiolabs.org/">Silex</a>, principalmente por ser baseado em componentes do Symfony. </p>

<p>Como eu tenho uma teoria de que só aprendemos alguma tecnologia quando precisamos desenvolver algo com ela eu me fiz um desafio: criar um aplicativo em Silex para facilitar a criação de serviços Rest e RPC. O resultado está no Github da Coderockr: <a href="https://github.com/Coderockr/SOA-Server">https://github.com/Coderockr/SOA-Server</a></p>

<p>Além do Silex eu usei alguns componentes que eu achei importantes:</p>

<ul>
<li><a href="https://github.com/rdohms/DMS-Filter">DMS/Filter</a> do meu amigo <a href="http://twitter.com/rdohms">Rafael Dohms</a> para fazer o filtro dos dados usando annotations</li>
<li><a href="http://www.doctrine-project.org/">Doctrine</a> para fazer o ORM das entidades</li>
<li><a href="https://github.com/symfony/ClassLoader">Symfony ClassLoader</a>  para facilitar o carregamento dos outros componentes</li>
<li><a href="https://github.com/symfony/Validator.git">Symfony Validator</a> para fazer a validação das entidades</li>
</ul>


<p>No <a href="https://github.com/Coderockr/SOA-Server/blob/master/README.md">README</a> do projeto tem mais informações sobre como fazer o download e instalação. Quanto ao funcionamento:</p>

<p>Toda a lógica do projeto está no arquivo i<a href="https://github.com/Coderockr/SOA-Server/blob/master/index.php">ndex.php</a>. Essa é uma das vantagens do Silex, por ser um micro-framework. Tudo é muito simples, principalmente a criação de rotas, validações. O index.php faz o papel de bootstrap da aplicação e possui as rotas para os métodos Rest (GET, PUT, POST e DELETE) e RPC.</p>

<p>Para que uma entidade esteja disponível via Rest basta que seja criada uma classe no namespace model que extends model\Entity, como no <a href="http://eminetto.github.com//github.com/Coderockr/SOA-Server/blob/master/model/User.php">exemplo</a>. Ela é uma entidade Doctrine, então temos todas as facilidades desse excelente framework. Além disso podemos adicionar as anotações para o DMS/Filter (por exemplo o @Filter\StripTags) e as configurações para o Symfony Validator (método loadValidatorMetadata)</p>

<p>Para que uma classe seja acessível via RPC ela precisa ser criada no namespace procedure e estender procedure\Procedure. Como Procedure é uma classe abstrata a nova classe precisa definir o método execute e retornar sempre um array com o resultado, conforme o <a href="https://github.com/Coderockr/SOA-Server/blob/master/procedure/Login.php">exemplo</a>.</p>

<p>Para termos um pouco de segurança foi implementado um controle de acesso, usando-se um header HTTP, o Authorization, que é validado baseado no arquivo configs/clients.php.</p>

<p>Também escrevi um <a href="https://github.com/Coderockr/SOA-Server/blob/master/sample.html">exemplo</a> de como seria fácil acessar via jQuery os serviços. O mesmo pode ser facilmente feito via PHP e outras linguagens usando Curl e outras bibliotecas.</p>

<p><strong>Conclusões</strong></p>

<p>Me diverti bastante escrevendo e testando esses componentes. Além da diversão, acabei criando algo que pretendo usar nos próximos projetos da Coderockr. Então esse desafio cumpriu seus objetivos: aprendi algo novo (Silex nesse caso) e consegui criar algo útil. Se for útil para alguém mais só aumenta a minha recompensa :)</p>

<p>Se alguém quiser contribuir com códigos é só usar a metodologia pull-request do Github e sugerir melhorias e correções.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novos webcasts da Coderockr]]></title>
    <link href="http://eminetto.github.com/blog/2012/02/29/novos-webcasts-da-coderockr/"/>
    <updated>2012-02-29T14:53:06-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/02/29/novos-webcasts-da-coderockr</id>
    <content type="html"><![CDATA[<p>A Coderockr repete a parceria com a ConexTI Live e lança novos webcasts. Confira no blog da <a href="http://www.coderockr.com/blog/2012/02/novos-webcasts/">Coderockr</a> e na <a href="http://eventos.oficinalivre.com.br/webcast-introducao-a-amazon-web-services/">página oficial dos webcasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usando componentes do Zend Framework]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/19/usando-componentes-do-zend-framework/"/>
    <updated>2012-01-19T11:00:37-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/19/usando-componentes-do-zend-framework</id>
    <content type="html"><![CDATA[<p>Uma das coisas mais legais do Zend Framework é a forma como ele foi construído, na forma de componentes que podem ser usados separadamente ou até substituídos. Dessa forma é possível usar somente alguns componentes em qualquer projeto, desenvolvido com outros frameworks ou mesmo sem nenhum. Exemplos de componentes que podem ser bem úteis:</p>

<ul>
<li>Zend_Mail</li>
<li>Zend_Cache</li>
<li>Zend_Db</li>
<li>Zend_Config</li>
<li>Zend_Date</li>
<li>Zend_Log</li>
</ul>


<p>Entre outros.
Um exemplo bem simples, usando o Zend_Cache:
[sourcecode language=&#8221;php&#8221;]
&lt;?php
//include do zend framework
$includePath  = get_include_path();
//o : é o separador de diretórios no Unix. No Windows seria ;
$includePath .= &#8216;:/var/www/html/library/&#8217;;
set_include_path($includePath);</p>

<p>//inicia o autoloader, responsável por incluir os arquivos dos componentes
require_once &#8216;Zend/Loader/Autoloader.php&#8217;;
$autoloader = Zend_Loader_Autoloader::getInstance();
$autoloader->setFallbackAutoloader(true);</p>

<p>$frontendOptions = array(</p>

<pre><code>'lifetime' =&gt; 7200, // tempo de vida
'automatic_serialization' =&gt; true
</code></pre>

<p>);
$backendOptions = array(&#8216;cache_dir&#8217; => &#8216;/tmp&#8217;);
// criando uma instancia do cache
$cache = Zend_Cache::factory(&#8216;Core&#8217;,//frontend</p>

<pre><code>'File',  //backend
$frontendOptions,
$backendOptions
</code></pre>

<p>);</p>

<p>if(!$result = $cache->load(&#8216;cachePosts&#8217;)) {</p>

<pre><code>  //aqui podemos usar o Zend_Db, por exemplo
  $result = 'aqui vai o processamento, como buscar os dados do banco';
  $cache-&gt;save($result, 'cachePosts');
</code></pre>

<p>}
echo $result;</p>

<p>[/sourcecode]
Dessa forma é fácil de extender seu projeto usando componentes bem estruturados e testados.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novo aplicativo da Coderockr]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/19/novo-aplicativo-da-coderockr/"/>
    <updated>2012-01-19T09:55:58-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/19/novo-aplicativo-da-coderockr</id>
    <content type="html"><![CDATA[<p>Lançamos ontem um novo aplicativo feito pela <a href="http://www.coderockr.com">Coderockr</a>. É o Ultimate Fun (uFun para os íntimos hehe) que está disponível gratuitamente para Android. A versão para iOS já foi enviada para a Apple e deve ser liberada nos próximos dias.
Mais informações e links para download <a href="http://www.coderockr.com/blog/2012/01/lancamento-ultimate-fun-para-android/">neste post </a>no nosso blog</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curso de desenvolvimento iOS]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/12/curso-de-desenvolvimento-ios/"/>
    <updated>2012-01-12T10:52:33-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/12/curso-de-desenvolvimento-ios</id>
    <content type="html"><![CDATA[<p>A Coderockr está lançando um novo curso em Joinville.
O @xorna vai ministrar a edição revisada do curso de desenvolvimento iOS, com material atualizado para as novidades do iOS 5
Maiores informações no <a href="http://www.coderockr.com/blog/2012/01/curso-desenvolvimento-ios/">nosso blog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curso de Zend Framework em Joinville]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/09/curso-de-zend-framework-em-joinville/"/>
    <updated>2012-01-09T11:35:00-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/09/curso-de-zend-framework-em-joinville</id>
    <content type="html"><![CDATA[<p>A Coderockr está iniciando seus cursos em 2012
O primeiro é o curso de Zend Framework que vou ministrar em Joinville
Os detalhes estão no nosso blog http://www.coderockr.com/blog/2012/01/curso-php-avancado-zend-framework/blog/
O próximo curso é sobre iOS. Novidades em breve</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nova versão do meu e-book sobre Zend Framework]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/05/nova-versao-do-meu-e-book-sobre-zend-framework/"/>
    <updated>2012-01-05T18:12:57-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/05/nova-versao-do-meu-e-book-sobre-zend-framework</id>
    <content type="html"><![CDATA[<p>Lancei hoje uma versão revisada do Zend Framework na prática. Confiram no <a href="http://www.zfnapratica.com.br">site oficial</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meus dois centavos sobre o MicroPHP Manifesto]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/05/meus-dois-centavos-sobre-o-microphp-manifesto/"/>
    <updated>2012-01-05T15:52:37-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/05/meus-dois-centavos-sobre-o-microphp-manifesto</id>
    <content type="html"><![CDATA[<p>Nos últimos dias um post tem gerado alguma discussão entre os programadores PHP: o MicroPHP Manifesto (<a href="http://funkatron.com/posts/the-microphp-manifesto.html">post original</a> e o <a href="http://microphp.org/">site que foi gerado depois</a>)
Confesso que concordo com vários pontos levantados pelo Ed Finkler no seu artigo, principalmente no ponto de que alguns frameworks estão ficando muito mais complexos do que o necessário.
Logo depois da publicação do post surgiram algumas respostas (<a href="http://blog.ircmaxell.com/2012/01/microphp-fallacy.html">essa</a> e <a href="http://www.phpriot.com/news/reddit-com-a-response-to-the-microphp-manifesto">essa</a>, por exemplo), umas concordando e outras crucificando o autor.
A minha opinião é: depende :) Depende do projeto. Estou trabalhando atualmente em um projeto enorme, com vários requisitos técnicos bem avançados, com equipes trabalhando remotamente e paralelamente. Neste projeto estamos usando Zend Framework e Doctrine e foi a melhor decisão.
Ao mesmo tempo precisei ministrar um curso onde o foco eram tecnologias bem específicas e não precisava adicionar complexidade, então a melhor opção foi o Slim, conforme comentei em outro <a href="http://eltonminetto.net/2011/11/29/slim-framework/">post</a>. Aliás, gostamos tanto do Slim que estamos usando em outros pequenos projetos da Coderockr. Gosto também da abordagem do Symfony, seus componentes e o <a href="http://silex.sensiolabs.org/">Silex</a>, micro-framework baseado nestes componentes.
Eu acho que o post teve um bom efeito, que foi gerar a discussão sobre o assunto, mas ele não deve ser levado tão ao pé da letra e nem gerar flamewars intermináveis. A idéia é sempre analisar qual é a melhor situação para seu projeto, e mesmo usando algo completo, como o Zend Framework, tentar sempre manter o desenvolvimento o mais simples e bem implementado.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curso sobre PHP, Memcache, Sphinx e Gearman]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/03/curso-sobre-php-memcache-sphinx-e-gearman/"/>
    <updated>2012-01-03T15:09:05-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/03/curso-sobre-php-memcache-sphinx-e-gearman</id>
    <content type="html"><![CDATA[<p>Em Fevereiro vou repetir o curso &#8220;mão na massa&#8221; que ministrei no <a href="http://eltonminetto.net/2011/09/30/tutorial-mao-na-massa-php-conference-2011/">PHPConference de 2011</a>, pela Tempo Real Eventos, em SP.
Os detalhes do curso encontram-se na <a href="http://www.temporealeventos.com.br/?area=242-memcached-gearman-e-sphinx-search">página do evento</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chamando o Sublime Text via Terminal]]></title>
    <link href="http://eminetto.github.com/blog/2011/12/23/chamando-o-sublime-text-via-terminal/"/>
    <updated>2011-12-23T16:41:22-02:00</updated>
    <id>http://eminetto.github.com/blog/2011/12/23/chamando-o-sublime-text-via-terminal</id>
    <content type="html"><![CDATA[<p>Se você, como eu, é viciado em usar o Terminal, o Sublime tem um comando para você pode abrir um arquivo ou diretório. Para isso precisamos primeiro criar um &#8220;atalho&#8221; para o executável:</p>

<p>sudo ln -s /Applications/Sublime Text 2.app/Contents/SharedSupport/bin/subl /usr/bin/subl</p>

<p>Agora é só executar:</p>

<p>subl arquivo (ou diretório)</p>
]]></content>
  </entry>
  
</feed>
