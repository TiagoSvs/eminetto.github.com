<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Elton Luís Minetto]]></title>
  <link href="http://eminetto.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://eminetto.github.com/"/>
  <updated>2012-05-08T18:15:56-03:00</updated>
  <id>http://eminetto.github.com/</id>
  <author>
    <name><![CDATA[eminetto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backup dos e-mails do Gmail]]></title>
    <link href="http://eminetto.github.com/blog/2011/12/09/backup-dos-e-mails-do-gmail/"/>
    <updated>2011-12-09T15:14:49-02:00</updated>
    <id>http://eminetto.github.com/blog/2011/12/09/backup-dos-e-mails-do-gmail</id>
    <content type="html"><![CDATA[<p>Hoje precisei fazer uma tarefa que acabou me levando a descobrir uma nova ferramenta. A tarefa em questão era: "exportar para uma lista os e-mails de todas as pessoas que compraram o meu <a href="http://www.zfnapratica.com.br">e-book</a>". Toda venda realizada com sucesso o Pagseguro me envia um e-mail avisando da venda, e um script PHP que eu criei envia o PDF do e-book para o e-mail do comprador. Então teoricamente só precisaria exportar essa lista de e-mails enviados da minha conta do Gmail para um arquivo TXT.
Após pesquisar algumas alternativas cheguei ao <a href="http://code.google.com/p/got-your-back/">Got Your Back (GYB)</a>. É um script Python que serve para fazer um backup/restore de todos os e-mails da sua conta do Gmail. Ele salva todas as mensagens em pastas separadas por ano/mes, no formato .eml, o que facilita o uso de alguma ferramenta de busca de textos como o find do MacOSX/Linux. E para facilitar ainda mais ele gera um banco de dados SQLite com os detalhes da mensagem (from, to, subject), então é só fazer uma consulta SQL e você tem acesso a todas as suas mensagens.
Achei bem útil e fácil de usar, então resolvi compartilhar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Material de minha palestra sobre Gearman]]></title>
    <link href="http://eminetto.github.com/blog/2010/07/26/material-de-minha-palestra-sobre-gearman/"/>
    <updated>2010-07-26T15:47:45-03:00</updated>
    <id>http://eminetto.github.com/blog/2010/07/26/material-de-minha-palestra-sobre-gearman</id>
    <content type="html"><![CDATA[<p>Coloquei no Slideshare o material da apresentação quer fiz no FISL 2010
<a href="http://www.slideshare.net/eminetto/entre-na-fila-processamento-distribudo-usando-gearman">Entre na fila. Processamento distribuído usando Gearman</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contabilizar espaço usado em FTP usando Python]]></title>
    <link href="http://eminetto.github.com/blog/2010/03/10/contabilizar-espaco-usado-em-ftp-usando-python/"/>
    <updated>2010-03-10T11:34:05-03:00</updated>
    <id>http://eminetto.github.com/blog/2010/03/10/contabilizar-espaco-usado-em-ftp-usando-python</id>
    <content type="html"><![CDATA[<p>Aqui na <a href="http://www.drimio.com">empresa</a> temos duas contas de FTP contratadas no nosso plano de hospedagem para usarmos como espaço de backup. As duas contas tem um espaço limitado e toda semana eu preciso monitorar quanto espaço estamos usando, para evitar erros no script de backup. Para facilitar esse controle eu criei um pequeno script Python para navegar em todas as pastas e me dizer quanto espaço estou usando. O script ficou assim:</p>

<pre><code>import os
from ftplib import FTP

def pretty_filesize(bytes):
    if bytes &gt;= 1073741824:
        return str(bytes / 1024 / 1024 / 1024) + ' GB'
    elif bytes &gt;= 1048576:
        return str(bytes / 1024 / 1024) + ' MB'
    elif bytes &gt;= 1024:
        return str(bytes / 1024) + ' KB'
    elif bytes &lt; 1024:
        return str(bytes) + ' bytes'

endereco_ftp = 'servidor'
usuario = 'usuario'
senha = 'senha'
conexao_ftp = FTP(endereco_ftp)

conexao_ftp.login(usuario,senha)
diretorio_corrente = conexao_ftp.pwd()
soma = 0
for i in conexao_ftp.nlst():
    conexao_ftp.cwd(i)
    for j in conexao_ftp.nlst():
        soma = soma + conexao_ftp.size(j)
    conexao_ftp.cwd('..')

print pretty_filesize(soma)
</code></pre>

<p>Agora é só colocar no crontab e receber diariamente o espaço utilizado.
Fontes:
<a href="http://www.vivaolinux.com.br/script/navegador-ftp">http://www.vivaolinux.com.br/script/navegador-ftp</a>
<a href="http://code.rivers.pro/python-function-to-convert-bytes-to-kbmbgb/">http://code.rivers.pro/python-function-to-convert-bytes-to-kbmbgb/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lock em arquivos usando SVN e Subclipse]]></title>
    <link href="http://eminetto.github.com/blog/2008/11/25/lock-em-arquivos-usando-svn-e-subclipse/"/>
    <updated>2008-11-25T15:09:44-02:00</updated>
    <id>http://eminetto.github.com/blog/2008/11/25/lock-em-arquivos-usando-svn-e-subclipse</id>
    <content type="html"><![CDATA[<p>Outra novidade para mim ao usar o Subversion foi o controle de Locks. </p>

<p>Eu sempre usei o CVS integrado ao Eclipse para gerenciar os projetos que eu trabalhava e com essa duplinha é bem fácil configurar para evitar que dois programadores alterem o mesmo arquivo.</p>

<p>Com o Subversion e o Eclipse (usando o plugin Subclipse) eu não encontrei essa opção. A solução que encontrei foi configurar o cliente do subversion para quando criar novos arquivos marcá-los com um flag. Este flag indica que, para editar o arquivo é preciso que seja feito o "lock" antes. No momento de criar o lock o Subclipse também verifica a versão do arquivo e avisa caso a versão local seja inferior a que consta no repositório. Desta forma eu garanto que o programador sempre tenha a última versão do arquivo e evito que duas pessoas alterem o mesmo arquivo ao mesmo tempo. Existem formas de corrigir isso usando práticas de merge, mas eu acho mais fácil evitar o problema do que resolvê-lo :-)</p>

<p>O que eu fiz foi alterar o arquivo config no diretório do usuário:</p>

<pre><code>mate ~/.subversion/config
</code></pre>

<p>Eu estou usando o Textmate no MacOSX. Mas o mesmo passo vai funcionar no Linux. No Windows XP o arquivo encontra-se no diretório</p>

<pre><code>c:\Documents and Settings\usuario\Dados de Aplicativos\Subversion\config
</code></pre>

<p>Neste arquivo eu alterei </p>

<pre><code># enable-auto-props = yes
</code></pre>

<p>para</p>

<pre><code>enable-auto-props = yes
</code></pre>

<p>E adicionei alinha abaixo na seção  [auto-props]</p>

<pre><code>* = svn:needs-lock
</code></pre>

<p>Desta forma, assim que o programador criar um novo arquivo e realizar o primeiro commit é adicionada esta flag ao arquivo. Todos que forem alterá-lo vão passar pela fase "lock-edit-commit", com um "update" caso seja necessário.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[None]]></title>
    <link href="http://eminetto.github.com/blog/2008/11/25/deploy-automatico-do-svn-para-o-htdocs/"/>
    <updated>2008-11-25T14:17:25-02:00</updated>
    <id>http://eminetto.github.com/blog/2008/11/25/deploy-automatico-do-svn-para-o-htdocs</id>
    <content type="html"><![CDATA[<p>Estou iniciando um novo projeto e aproveitei para mudar do CVS para o Subversion. </p>

<p>Uma das coisas que achei interessante é o esquema de "<em>hooks</em>". É um conceito parecido com "<em>triggers</em>" de bancos de dados. Você pode programar alguns scripts para serem executados em momentos específicos do ciclo gerenciado pelo SVN. As opções são:</p>

<pre><code>post-commit.tmpl




post-lock.tmpl




post-revprop-change.tmpl




post-unlock.tmpl




pre-commit.tmpl




pre-lock.tmpl




pre-revprop-change.tmpl




pre-unlock.tmpl




start-commit.tmpl
</code></pre>

<p>Os nomes são auto-explicativos. Por exemplo, o script post-lock vai ser executado sempre após algum usuário ter feito o lock de um arquivo.</p>

<p>Estes arquivos estão armazenados no diretório <em>hooks </em>do repositório do projeto.</p>

<p>O que eu fiz foi alterar o post-commit.tmpl</p>

<p>É preciso remover a extensão do nome e dar permissão de execução no arquivo, então:</p>

<pre><code>cp post-commit.tmpl post-commit




chmod +x post-commit
</code></pre>

<p>O conteúdo do arquivo ficou assim:</p>

<pre><code>&lt;span style="font-family:'Lucida Grande';line-height:19px;white-space:normal;"&gt;&lt;span style="font-family:'Courier New';line-height:18px;white-space:pre;"&gt;REPOS="$1"&lt;/span&gt;&lt;/span&gt;




REV="$2"




PROD="/var/www/html"




#pega todas as alteracoes




svnlook changed $REPOS --revision $REV &gt;&gt; /tmp/lixo_$REV




#pega cada alteracao e salva




for i in `cat /tmp/lixo_$REV|cut -c 5-1024` ; do




  svnlook cat $REPOS $i &gt; $PROD/$i




done




#apagar arquivo




rm /tmp/lixo_$REV
</code></pre>

<p>Desta forma cada vez que um programador faz o commit do fonte ele é automaticamente salvo no htdocs, onde fica acessível para a equipe de testes. </p>

<p>Lógico que esse script pode ser melhorado e isso está sendo executado em um servidor de desenvolvimento e não o de produção. Além disso eu comecei a usar o SVN somente agora, por isso, se alguém encontrar um problema ou erro na lógica me avisem :-)</p>
]]></content>
  </entry>
  
</feed>
