<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coderockr | Elton Luís Minetto]]></title>
  <link href="http://eminetto.github.com/blog/categories/coderockr/atom.xml" rel="self"/>
  <link href="http://eminetto.github.com/"/>
  <updated>2012-05-08T17:57:22-03:00</updated>
  <id>http://eminetto.github.com/</id>
  <author>
    <name><![CDATA[eminetto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maldito segmentation fault]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/27/maldito-segmentation-fault/"/>
    <updated>2012-04-27T15:30:50-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/27/maldito-segmentation-fault</id>
    <content type="html"><![CDATA[<p>Esse é um daqueles posts que serve mais para me ajudar, mas acho que pode ser útil para mais pessoas.
Já tive vários casos onde uma aplicação PHP gera um erro muito genérico nos logs do Apache, o famigerado "Segmentation fault". Na prática significa que alguma coisa deu tão errado que o processo do Apache que estava executando o seu script PHP foi cancelado. Mas o log não ajuda muito, pois podem ser várias coisas.
Nesse post vou descrever o processo que fiz para encontrar um problema em uma aplicação. Os passos foram feitos em uma máquina virtual Ubuntu, a que eu gerei com o <a href="http://eltonminetto.net/2012/04/02/usando-o-vagrant-para-criar-maquinas-virtuais-para-desenvolvimento-e-testes/">Vagrant</a>.
O primeiro passo é instalar os pacotes necessários para conseguirmos toda a informação possível:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get install libapr1-dbg libaprutil1-dbg gdb php5-dbg
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Precisamos também configurar o Apache para que ele gere um "dump" com toda a informação do erro em um arquivo. No arquivo /etc/apache2/apache2.conf eu adicionei a seguinte linha:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>CoreDumpDirectory /tmp/apache2-gdb-dump
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Também precisamos criar o diretório e dar permissões para o Apache criar os arquivos:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /tmp/apache2-gdb-dump
</span><span class='line'>chown -R www-data:www-data /tmp/apache2-gdb-dump
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Após reiniciar o Apache é só executar novamente o script que está gerando o erro, e um arquivo será gerado no diretório criado, o <em>/tmp/apache2-gdb-dump/core</em></p>

<p>Com esse arquivo podemos executar o gdb e verificar o que aconteceu com o programa. Precisamos executar:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gdb /usr/sbin/apache2 /tmp/apache2-gdb-dump/core
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Será mostrado uma lista de ítens que o Apache executou. Para ver mais detalhe é só executar o comando
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bt full
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Analisando as mensagem é bem provável que você vai encontrar uma pista para o que exatamente está ocorrendo. No caso da minha aplicação que testei hoje o problema era na forma como estava carregando o arquivo .phar do Silex, conforme o que o gdb me mostrou:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1&gt;0  0x0112cefe in phar_get_archive <span class="o">(</span><span class="nv">archive</span><span class="o">=</span>0xbff5f87c, <span class="nv">fname</span><span class="o">=</span>0xb5dab6c4 <span class="s2">&quot;/vagrant/SOA-Server/vendor/silex.phar&quot;</span>, <span class="nv">fname_len</span><span class="o">=</span>55, <span class="nb">alias</span><span class="o">=</span>0x213f323c <span class="s2">&quot;silex.phar&quot;</span>, <span class="nv">alias_len</span><span class="o">=</span>10, <span class="nv">error</span><span class="o">=</span>0x0<span class="o">)</span> at /build/buildd/php5-5.3.2/ext/phar/util.c:1255&lt;/h1&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Espero que esse post seja útil para mais alguém, e se você tiver outra receita de como desvendar esse tipo de problemas é só usar os comentários para dar a dica.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git sparse checkouts]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/25/git-sparse-checkouts/"/>
    <updated>2012-04-25T13:45:14-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/25/git-sparse-checkouts</id>
    <content type="html"><![CDATA[<p>Ontem eu e o colega <a href="http://twitter.com/msilvagarcia">Marcos Garcia</a> nos deparamos com uma situação que acabou nos ensinando mais um truque do git
Um dos repositórios privados da <a href="http://www.coderockr.com">Coderockr</a> no Github tem uma estrutura parecida com essa:</p>

<p>[sourcecode language="bash"]
Design - arquivos PSD e PNG com as telas do projeto
Docs - documentações do projeto
Android - porção Android
iOS - porção de códigos para o iPhone/iPad
Web - interface de administração do projeto, acessível via web
library - diretório com entidades e webservices usado pelo projeto
[/sourcecode]</p>

<p>A nossa necessidade era de fazer o deploy para o nosso servidor web apenas da pasta Web do projeto, não necessitando das demais. O git permite fazer algo assim usando <a href="http://help.github.com/submodules/">submodulos</a> mas não era exatamente o que procurávamos, principalmente porque cada submodulo deve ser um repositório separado no Github, o que iria aumentar os nossos custos mensais.
Depois de algumas pesquisas no Google o Marcos encontrou a solução pro problema: o git sparse checkouts, uma opção que foi lançada com a versão 1.7 do git.
Para exemplificar o uso, no nosso servidor agora fazemos o seguinte:</p>

<p>[sourcecode language="bash"]
git clone <repository_url> <directory>
cd <directory>
[/sourcecode]</p>

<p>Habilitamos a opção do sparse checkout</p>

<p>[sourcecode language="bash"]
git config core.sparsecheckout true
[/sourcecode]</p>

<p>Indicamos quais diretórios queremos ter acesso:</p>

<p>[sourcecode language="bash"]
echo Web >> .git/info/sparse-checkout
echo library >> .git/info/sparse-checkout
[/sourcecode]</p>

<p>E rodamos o comando <em>read-tree</em> para atualizar a árvore de diretórios</p>

<p>[sourcecode language="bash"]
git read-tree -m -u HEAD
[/sourcecode]</p>

<p>Se verificar com o comando <em>ls</em> é possível ver que os outros diretórios desapareceram do diretório do projeto
Quando rodarmos um git pull para atualizar, apenas os diretórios Web e library serão atualizados.
Com isso conseguimos resolver o nosso problema sem aumentar os nossos custos ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UML usando Astah]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/19/uml-usando-astah/"/>
    <updated>2012-04-19T13:43:07-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/19/uml-usando-astah</id>
    <content type="html"><![CDATA[<p>Quem me apresentou o Astah foi o amigo <a href="https://twitter.com/otaviofff">Otavio Ferreira</a>, e me tornei fã imediatamente da ferramenta.
O Astah é uma ferramenta para modelagem UML muito fácil de usar e muito útil. Ela possui edições <a href="http://astah.net/editions">pagas</a> mas eu estou usando a <a href="http://astah.net/editions/community">Community Edition</a>, que é gratuíta e possui as principais funcionalidades que eu preciso no planejamento dos projetos da Coderockr, como modelagem de classes, use cases, componentes, pacotes, etc. As versões pagas contam com plugins para integração com outras ferramentas como as da Atlassian e mais diagramas.
Existem versões para Windows, Linux e Mac e uma <a href="http://astah.net/editions/pad">versão para iPad</a> que apesar de ser mais simples (somente diagramas de classes) impressiona pela facilidade de uso e interface clara.
Para quem precisa/gosta de ter seus projetos bem documentados fica a dica dessa ótima ferramenta.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desafio de programação]]></title>
    <link href="http://eminetto.github.com/blog/2012/04/18/desafio-de-programacao/"/>
    <updated>2012-04-18T17:19:15-03:00</updated>
    <id>http://eminetto.github.com/blog/2012/04/18/desafio-de-programacao</id>
    <content type="html"><![CDATA[<p>Tivemos mais uma idéia maluca na Coderockr. Propor um desafio de programação. Confere lá no <a href="http://www.coderockr.com/blog/2012/04/desafio-de-programacao/">nosso blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novo aplicativo da Coderockr]]></title>
    <link href="http://eminetto.github.com/blog/2012/01/19/novo-aplicativo-da-coderockr/"/>
    <updated>2012-01-19T09:55:58-02:00</updated>
    <id>http://eminetto.github.com/blog/2012/01/19/novo-aplicativo-da-coderockr</id>
    <content type="html"><![CDATA[<p>Lançamos ontem um novo aplicativo feito pela <a href="http://www.coderockr.com">Coderockr</a>. É o Ultimate Fun (uFun para os íntimos hehe) que está disponível gratuitamente para Android. A versão para iOS já foi enviada para a Apple e deve ser liberada nos próximos dias.
Mais informações e links para download <a href="http://www.coderockr.com/blog/2012/01/lancamento-ultimate-fun-para-android/">neste post </a>no nosso blog</p>
]]></content>
  </entry>
  
</feed>
